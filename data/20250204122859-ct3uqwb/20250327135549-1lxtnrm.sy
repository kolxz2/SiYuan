{"ID":"20250327135549-1lxtnrm","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250327135549-1lxtnrm","title":"MBAND-158112 FH. 776. Правки по смарт полям","type":"doc","updated":"20250407170544"},"Children":[{"ID":"20250327135549-a56pqbm","Type":"NodeParagraph","Properties":{"id":"20250327135549-a56pqbm","updated":"20250407170542"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FhGetCurrencyInfoListUseCaseFacade"},{"Type":"NodeText","Data":"​"}]},{"ID":"20250407170540-aw2giqn","Type":"NodeParagraph","Properties":{"id":"20250407170540-aw2giqn","updated":"20250407170540"}},{"ID":"20250407170544-rez08cu","Type":"NodeParagraph","Properties":{"id":"20250407170544-rez08cu","updated":"20250407170544"}},{"ID":"20250407170544-8s36d3l","Type":"NodeParagraph","Properties":{"id":"20250407170544-8s36d3l","updated":"20250407170544"}},{"ID":"20250407170540-2xxdztg","Type":"NodeParagraph","Properties":{"id":"20250407170540-2xxdztg","updated":"20250407170540"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"maxFractionDigits"},{"Type":"NodeText","Data":"​= 0"}]},{"ID":"20250327141156-68bf7c9","Type":"NodeParagraph","Properties":{"id":"20250327141156-68bf7c9","updated":"20250327141156"}},{"ID":"20250327141434-3rl462h","Type":"NodeParagraph","Properties":{"id":"20250327141434-3rl462h","updated":"20250327141434"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250327141434-6m5g2km.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250327153400-y3v4wxs","Type":"NodeParagraph","Properties":{"id":"20250327153400-y3v4wxs","updated":"20250327153402"},"Children":[{"Type":"NodeText","Data":"~smart-fields-ask"}]},{"ID":"20250327181849-vr27ktb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250327181849-vr27ktb","updated":"20250327181849"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dW5kZWZpbmVk"},{"Type":"NodeCodeBlockCode","Data":".wiValueDistinctionListener { new3, new2, new -\u003e\n                Timber.tag(\"amountTextField\").d(\"new $new\")\n                Timber.tag(\"amountTextField\").d(\"new2 $new2\")\n                Timber.tag(\"amountTextField\").d(\"new3 $new3\")\n\n                new?.let {\n                    Timber.tag(\"amountTextField\").d(\"if (lastValue2 != it) ${lastValue2?.toInt()} ${it.toInt()} = ${lastValue2?.toInt() != it.toInt()} \")\n\n                    if (lastValue2?.toInt() != it.toInt()) {\n                        Timber.tag(\"amountTextField\").d(\"it.precision() ${it.precision()}\")\n                        Timber.tag(\"amountTextField\").d(\"it.scale() ${it.scale()}\")\n\n                        // Получаем только целую часть числа\n                        val bigIntValue = it.toBigInteger().toString()\n                        Timber.tag(\"amountTextField\").d(\"bigIntValue $bigIntValue\")\n\n                        // Берем только первые 9 цифр\n                        val truncatedValue = bigIntValue.take(MAX_AMOUNT_INTEGER_DIGITS).toBigDecimal()\n                        Timber.tag(\"amountTextField\").d(\"truncatedValue $truncatedValue\")\n\n                        // Полностью убираем дробную часть\n\n                        // Форматируем с пробелами (разделяем по 3 знака)\n                        val formattedValue = truncatedValue.toPlainString()\n                            .reversed()\n                            .chunked(3)\n                            .joinToString(\" \")\n                            .reversed()\n\n                        Timber.tag(\"v\").d(\"final newValue $formattedValue\")\n//                        Timber.tag(\"amountTextField\").d(\"maxFractionDigits ${amountTextField?.maxFractionDigits}\")\n\n                        lastValue2 = truncatedValue\n                        viewModel.onBalanceChanged(truncatedValue)\n                    }\n                }\n            }\n\n\n\n\n\n            .apply {\n                Timber.tag(\"amountTextField\").d(\"lastValue1 ${lastValue}\")\n                doOnViewBind { it.textInputLayout.updatePadding(right = 0) }\n                decorator = null\n//                Timber.tag(\"amountTextField\").d(\"lastValue2 ${lastValue}\")\n//                lastValue?.let {\n////                    Timber.tag(\"amountTextField\").d(\"precision ${it.precision()}\")\n////                    Timber.tag(\"amountTextField\").d(\"scale ${it.scale()}\")\n////                    Timber.tag(\"amountTextField\").d(\"value1 ${it}\")\n////                    val integerPartLength = it.precision() - it.scale()\n//                    if (it \u003e= MAX_AMOUNT_INTEGER_DIGITS) {\n//                        maxFractionDigits = 0\n//                    }\n//                }\n            }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250404122621-tyanz87","Type":"NodeParagraph","Properties":{"id":"20250404122621-tyanz87","updated":"20250404122621"}},{"ID":"20250404122622-kr8tw5y","Type":"NodeParagraph","Properties":{"id":"20250404122622-kr8tw5y","updated":"20250404122622"}},{"ID":"20250404122623-sbdjp1x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250404122623-sbdjp1x","updated":"20250404122623"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dW5kZWZpbmVk"},{"Type":"NodeCodeBlockCode","Data":"package ru.tinkoff.mb.feature.ai.financehealth.presentation.ui.activities.manualassets.form\n\nimport android.os.Vibrator\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.isVisible\nimport androidx.core.view.updatePadding\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.withResumed\nimport kotlinx.coroutines.launch\nimport ru.tinkoff.core.components.sf.smartfieldz.ZFab\nimport ru.tinkoff.core.components.sf.smartfieldz.ZForm\nimport ru.tinkoff.core.components.sf.smartfieldz.bindWithContentView\nimport ru.tinkoff.core.components.sf.smartfieldz.builder.ZFactory\nimport ru.tinkoff.core.components.sf.smartfieldz.builder.amountConversionField\nimport ru.tinkoff.core.components.sf.smartfieldz.builder.form\nimport ru.tinkoff.core.components.sf.smartfieldz.builder.textField\nimport ru.tinkoff.core.components.sf.smartfieldz.builder.wiFormatAmount\nimport ru.tinkoff.core.components.sf.smartfieldz.clearFocus\nimport ru.tinkoff.core.components.sf.smartfieldz.component.plugin.validator.brickValidate\nimport ru.tinkoff.core.components.sf.smartfieldz.component.plugin.validator.brickValidateRules\nimport ru.tinkoff.core.components.sf.smartfieldz.component.plugin.validator.rule.notBlank\nimport ru.tinkoff.core.components.sf.smartfieldz.component.plugin.validator.rule.predicate\nimport ru.tinkoff.core.components.sf.smartfieldz.component.plugin.validator.rule.regex\nimport ru.tinkoff.core.components.sf.smartfieldz.feature.amount.ZAmountConversionField\nimport ru.tinkoff.core.components.sf.smartfieldz.feature.amount.ZAmountField\nimport ru.tinkoff.core.components.sf.smartfieldz.feature.amount.wiConverter\nimport ru.tinkoff.core.components.sf.smartfieldz.module.ZTextModule\nimport ru.tinkoff.core.components.sf.smartfieldz.module.wiFloatingTitle\nimport ru.tinkoff.core.components.sf.smartfieldz.module.wiMaxLines\nimport ru.tinkoff.core.components.sf.smartfieldz.module.wiMaxSymbols\nimport ru.tinkoff.core.components.sf.smartfieldz.module.wiMaxSymbolsCounterVisible\nimport ru.tinkoff.core.components.sf.smartfieldz.module.wiPlaceholder\nimport ru.tinkoff.core.components.sf.smartfieldz.module.wiStyle\nimport ru.tinkoff.core.components.sf.smartfieldz.node.ZSmartNode.Companion.decorator\nimport ru.tinkoff.core.components.sf.smartfieldz.node.getStringValue\nimport ru.tinkoff.core.components.sf.smartfieldz.node.impl.ZStringField\nimport ru.tinkoff.core.components.sf.smartfieldz.node.impl.wiBauble\nimport ru.tinkoff.core.components.sf.smartfieldz.node.wiChildren\nimport ru.tinkoff.core.components.sf.smartfieldz.node.wiTag\nimport ru.tinkoff.core.components.sf.smartfieldz.node.wiValue\nimport ru.tinkoff.core.components.uikit.notificationMiddle.TuiNotificationMiddleController\nimport ru.tinkoff.core.components.uikit.notificationMiddle.data.TuiNotificationMiddleContent\nimport ru.tinkoff.core.components.uikit.notificationtoast.TuiToastController\nimport ru.tinkoff.mb.common.config.data.ValidationSchema\nimport ru.tinkoff.mb.common.resources.TextResource\nimport ru.tinkoff.mb.common.ui.base.ext.collectWithLifecycle\nimport ru.tinkoff.mb.common.ui.base.mvvm.view.bind.ViewBindingAdapter\nimport ru.tinkoff.mb.common.ui.base.mvvm.view.bind.context\nimport ru.tinkoff.mb.common.ui.base.utils.setText\nimport ru.tinkoff.mb.common.ui.kit.utils.showNeutral\nimport ru.tinkoff.mb.common.ui.utils.extensions.VibratorDuration\nimport ru.tinkoff.mb.common.ui.utils.extensions.playShortVibration\nimport ru.tinkoff.mb.common.util.ext.lazyUnsafe\nimport ru.tinkoff.mb.feature.ai.common.ui.smartfieldz.ZTextImageBauble\nimport ru.tinkoff.mb.feature.ai.common.ui.smartfieldz.ZTextImageBauble.Companion.wiOnClickListener\nimport ru.tinkoff.mb.feature.ai.financehealth.localization.FinanceHealthLocalization\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.databinding.FinhealthFragmentManualAssetsFormBinding\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.util.toast.FhTuiToastController\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.util.zsmartfield.ZDistinctionValueListener.Companion.wiTextDistinctionValueListener\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.util.zsmartfield.ZDistinctionValueListener.Companion.wiValueDistinctionListener\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.util.zsmartfield.ZFabDoneTextProvider\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.util.zsmartfield.ZOnNextPressDefault\nimport ru.tinkoff.mb.feature.ai.financehealth.presentation.util.zsmartfield.ZOnNextPressRelease\nimport java.math.RoundingMode\n\n/**\n * @author y.khan\n */\ninternal class FhManualAssetsFormBindingAdapter(private val vibrator: Vibrator) : ViewBindingAdapter\u003cFinhealthFragmentManualAssetsFormBinding,\n        FhManualAssetsFormViewModel\u003e() {\n\n    private var form: ZForm? = null\n\n    private var nameTextField: ZStringField? = null\n\n    private var amountTextField: ZAmountField? = null\n\n    private var currencyBauble: ZTextImageBauble? = null\n\n    private val onNextPressDefault by lazyUnsafe { ZOnNextPressDefault() }\n\n    private val onNextPressRelease by lazyUnsafe { ZOnNextPressRelease() }\n\n    private val tuiNotificationMiddleController: TuiNotificationMiddleController by lazyUnsafe { TuiNotificationMiddleController(fragmentManager) }\n\n    override fun bind() {\n        initForm()\n        initSubmitButton()\n        initInsets()\n        initObservers()\n    }\n\n    private fun render(state: FhManualAssetsFormUiState) {\n        if (state.isEdit) {\n            viewBinding.root.isLocked = state.isLoading\n            viewBinding.title.setText(TextResource.id(FinanceHealthLocalization.finhealth_total_money_ma_edit_account_title))\n            viewBinding.next.setText(TextResource.id(ru.tinkoff.mb.common.localization.R.string.common_save))\n            viewBinding.next.isLoading = state.isLoading\n            viewBinding.delete.isVisible = true\n            nameTextField?.onNextPress = onNextPressRelease\n            nameTextField?.wiPlaceholder(state.namePlaceholder?.toCharSequence(context))\n            nameTextField?.wiValue(state.name ?: state.namePrefill?.toCharSequence(context)?.toString())\n            nameTextField?.setValidationSchema(state.accountNameValidationSchema)\n            amountTextField?.onNextPress = onNextPressRelease\n            amountTextField?.wiValue(state.balance)\n            currencyBauble?.setText(state.currency.name)\n            currencyBauble?.setIcon(ZTextImageBauble.Icon.Url(state.currencyIcon))\n            form?.fab?.textProvider = ZFabDoneTextProvider()\n        } else {\n            viewBinding.root.isLocked = state.isLoading\n            viewBinding.title.setText(TextResource.id(FinanceHealthLocalization.finhealth_total_money_ma_add_acc_title2))\n            viewBinding.next.setText(TextResource.id(ru.tinkoff.mb.common.localization.R.string.common_done))\n            viewBinding.next.isLoading = state.isLoading\n            viewBinding.delete.isVisible = false\n            nameTextField?.onNextPress = onNextPressDefault\n            nameTextField?.wiPlaceholder(state.namePlaceholder?.toCharSequence(context))\n            nameTextField?.wiValue(state.name ?: state.namePrefill?.toCharSequence(context)?.toString())\n            nameTextField?.setValidationSchema(state.accountNameValidationSchema)\n            amountTextField?.onNextPress = onNextPressDefault\n            amountTextField?.wiValue(state.balance)\n            currencyBauble?.setText(state.currency.name)\n            currencyBauble?.setIcon(ZTextImageBauble.Icon.Url(state.currencyIcon))\n            form?.fab?.textProvider = ZFab.TextProvider.Default\n        }\n    }\n\n    private fun news(news: FhManualAssetsFormUiNews) {\n        when (news) {\n            is FhManualAssetsFormUiNews.ShowNeutralToast -\u003e {\n                TuiToastController.obtain(context).showNeutral(context, news.message)\n            }\n            is FhManualAssetsFormUiNews.ShowErrorToast -\u003e {\n                FhTuiToastController.showErrorToast(context, news.message)\n            }\n            is FhManualAssetsFormUiNews.HideToast -\u003e {\n                TuiToastController.obtain(context).hideAll()\n            }\n            is FhManualAssetsFormUiNews.ShowLoader -\u003e {\n                showLoader()\n            }\n            is FhManualAssetsFormUiNews.HideLoader -\u003e {\n                hideLoader()\n            }\n            is FhManualAssetsFormUiNews.RequestNameFocus -\u003e {\n                nameTextField?.requestFocus()\n            }\n            is FhManualAssetsFormUiNews.RequestAmountFocus -\u003e {\n                amountTextField?.requestFocus()\n            }\n            is FhManualAssetsFormUiNews.ClearFormFocus -\u003e {\n                form?.clearFocus()\n            }\n            is FhManualAssetsFormUiNews.Haptic -\u003e {\n                vibrator.playShortVibration(VibratorDuration.MICRO)\n            }\n        }\n    }\n\n    private fun showLoader() {\n        lifecycleScope.launch {\n            lifecycle.withResumed {\n                tuiNotificationMiddleController.showOrUpdate(TuiNotificationMiddleContent.WithLoader())\n            }\n        }\n    }\n\n    private fun hideLoader() {\n        lifecycleScope.launch {\n            lifecycle.withResumed {\n                tuiNotificationMiddleController.hide()\n            }\n        }\n    }\n\n    private fun initObservers() {\n        viewModel.state.collectWithLifecycle(this, Lifecycle.State.STARTED, this::render)\n        viewModel.news.collectWithLifecycle(this, Lifecycle.State.STARTED, this::news)\n    }\n\n    private val converterListener: ZAmountConversionField.Converter = ZAmountConversionField.Converter { field, side, value -\u003e\n//        Timber.tag(\"MoneyAmountRenderer\").i(\"field = ${field.value}, side = ${side}, value = ${value}\")\n        field.setValidationError(null)\n\n        // Устанавливаем значение без дробной части\n        value?.let {\n            val roundedValue = it.setScale(0, RoundingMode.DOWN) // Убираем дробную часть\n//            val integerDigits = roundedValue.precision() - roundedValue.scale()\n//            // Устанавливаем maxIntegerDigits в зависимости от количества цифр\n//            val maxDigits = if (integerDigits \u003e 9) 0 else 2\n//            amountTextField?.wiFormatAmount(maxIntegerDigits = maxDigits)\n            viewModel.onBalanceChanged(roundedValue)\n\n            field.setValue(roundedValue)\n//            amountTextField?.setValue(roundedValue)\n//            viewModel.amount.value = roundedValue\n\n            // Определяем количество цифр в целом числе\n        }\n    }\n\n    private fun initForm() {\n        val currencyBauble = ZTextImageBauble()\n            .wiTag(ID_CURRENCY_BAUBLE)\n            .wiOnClickListener { viewModel.onSelectCurrency() }\n            .also { currencyBauble = it }\n        val nameTextField = ZFactory\n            .textField(ID_ACCOUNT_NAME)\n            .wiTag(ID_ACCOUNT_NAME)\n            .wiFloatingTitle(false)\n            .brickValidateRules { notBlank(\"\") }\n            .wiMaxLines(1)\n            .wiTextDistinctionValueListener { node, _, new -\u003e\n                if (new.isNullOrEmpty()) {\n                    viewModel.onNameChanged(new, null)\n                } else {\n                    val isValid = node.validate(false)\n                    viewModel.onNameChanged(new, node.error.orEmpty().takeIf { !isValid })\n                }\n            }\n            .apply { decorator = null }\n            .also { nameTextField = it }\n        val amountTextField = ZFactory\n            .amountConversionField(ID_ACCOUNT_AMOUNT)\n            .wiPlaceholder(context.getString(FinanceHealthLocalization.finhealth_total_money_ma_sf_amount))\n            .wiTag(ID_ACCOUNT_AMOUNT)\n            .wiBauble(currencyBauble)\n            .wiStyle(ZTextModule.Style.Default)\n            .wiFloatingTitle(false)\n            .brickValidateRules { notBlank(\"\") }\n            .wiFormatAmount(maxIntegerDigits = MAX_AMOUNT_INTEGER_DIGITS)\n//            .wiConverter(converterListener)\n//            .wiMaxSymbolsCounterVisible(false)\n            .wiMaxLines(1)\n            .wiValueDistinctionListener { field, prev, new -\u003e\n                new?.let {\n                    val roundedValue = it.setScale(0, RoundingMode.DOWN) // Убираем дробную часть\n                    viewModel.onBalanceChanged(roundedValue)\n                    amountTextField?.setValue(roundedValue)\n                }\n            }\n//            .wiValueDistinctionListener { _, _, new -\u003e\n//                viewModel.onBalanceChanged(new)\n//            }\n            .apply {\n//                observeAmountChanges(viewModel.amount)\n                doOnViewBind { it.textInputLayout.updatePadding(right = 0) }\n                decorator = null\n            }\n            .also {\n                amountTextField = it\n            }\n\n        ZFactory\n            .form()\n            .wiChildren(nameTextField, amountTextField)\n            .bindWithContentView(viewBinding.form)\n            .also { form = it }\n    }\n\n   /* private fun ZAmountConversionField.observeAmountChanges(srcAmountFlow: MutableStateFlow\u003cBigDecimal?\u003e) {\n        viewModel.viewModelScope.launch {\n            srcAmountFlow.collect { newAmount -\u003e\n                updateAmount(newAmount)\n            }\n        }\n    }\n\n    private fun ZAmountConversionField.updateAmount(newAmount: BigDecimal?) {\n        val srcAmount = newAmount ?: BigDecimal.ZERO\n\n        val roundedValue = srcAmount.setScale(0, RoundingMode.DOWN)\n        setValue(roundedValue, true)\n    }*/\n\n    /*    private fun ZAmountConversionField.updateAmount(srcAmountFlow: MutableStateFlow\u003cBigDecimal?\u003e) {\n    //        wiConverter(null)\n\n            val srcAmount = srcAmountFlow.value ?: BigDecimal.ZERO  // Берем значение из потока, если null → 0\n\n            if (value == null || srcAmount.compareTo(value) != 0 || text.isNullOrEmpty()) {\n                val roundedValue = srcAmount.setScale(0, RoundingMode.DOWN)\n                setValue(roundedValue, true)\n            } else{\n                val roundedValue = srcAmount.setScale(0, RoundingMode.DOWN)\n                setValue(roundedValue, true)\n            }\n\n            // Поскольку srcAmount — это теперь BigDecimal, удаляем обновление `appendix`\n            // или передаем валюту отдельно, если она важна\n\n    //        wiConverter(converterListener)\n        }*/\n\n    private fun initSubmitButton() {\n        viewBinding.next.setOnClickListener {\n            val isValid = form?.validate(false) ?: false\n            viewModel.onSubmit(form?.error.orEmpty().takeIf { !isValid })\n        }\n        viewBinding.delete.setOnClickListener {\n            viewModel.onDelete()\n        }\n    }\n\n/*    private fun ZAmountConversionField.wiMaxDestSymbols(maxSymbols: Int): ZAmountConversionField {\n        return apply { destView()?.maxSymbols = maxSymbols }\n    }*/\n\n    private fun ZStringField.setValidationSchema(schema: ValidationSchema?) {\n        if (schema != null) {\n            val maxLen = schema.maxLength\n            if (maxLen != null) {\n                wiMaxSymbols(maxLen)\n                wiMaxSymbolsCounterVisible(false)\n            }\n            brickValidateRules {\n                val regexp = schema.regexp\n                predicate(\"\") {\n                    val value = it.getStringValue().orEmpty()\n                    value.isNotEmpty()\n                }\n                notBlank(context.getString(FinanceHealthLocalization.finhealth_total_money_ma_notification_input_error))\n                if (regexp != null) {\n                    regex(context.getString(FinanceHealthLocalization.finhealth_total_money_ma_notification_input_error), regexp)\n                }\n            }\n        } else {\n            brickValidate()\n        }\n    }\n\n    private fun initInsets() {\n        ViewCompat.setOnApplyWindowInsetsListener(viewBinding.floatingContainer) { view, insets -\u003e\n            val ime = insets.isVisible(WindowInsetsCompat.Type.ime())\n            view.isVisible = !ime\n            insets\n        }\n    }\n\n    private companion object {\n        const val MAX_AMOUNT_INTEGER_DIGITS = 9\n        const val ID_ACCOUNT_NAME = \"ID_ACCOUNT_NAME\"\n        const val ID_ACCOUNT_AMOUNT = \"ID_ACCOUNT_AMOUNT\"\n        const val ID_CURRENCY_BAUBLE = \"ID_CURRENCY_BAUBLE\"\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}